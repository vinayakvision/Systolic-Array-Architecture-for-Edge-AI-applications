
module systolic_array_tb;

    // Parameters
    localparam CLK_PERIOD = 10;
    localparam DONE_CYCLES = 9;

    // Signals for the UUT
    reg clk;
    reg rst;
    wire done;

    // Input matrices as arrays
    reg [31:0] matrix_a [0:3];
    reg [31:0] matrix_b [0:3];
    
    // Outputs from the UUT
    wire [63:0] result_pe [0:15];

    // Individual wires to connect to the module's ports
    wire [31:0] inp_west0, inp_west4, inp_west8, inp_west12;
    wire [31:0] inp_north0, inp_north1, inp_north2, inp_north3;
    
    // Assigning array elements to individual wires
    assign inp_north0 = matrix_a[0];
    assign inp_north1 = matrix_a[1];
    assign inp_north2 = matrix_a[2];
    assign inp_north3 = matrix_a[3];
    
    assign inp_west0 = matrix_b[0];
    assign inp_west4 = matrix_b[1];
    assign inp_west8 = matrix_b[2];
    assign inp_west12 = matrix_b[3];

    // Instantiate the Unit Under Test (UUT)
    systolic_array uut (
        .inp_west0(inp_west0), .inp_west4(inp_west4), .inp_west8(inp_west8), .inp_west12(inp_west12),
        .inp_north0(inp_north0), .inp_north1(inp_north1), .inp_north2(inp_north2), .inp_north3(inp_north3),
        .clk(clk),
        .rst(rst),
        .done(done)
    );

    // Using hierarchical reference to access results
    assign result_pe[0] = uut.result0;
    assign result_pe[1] = uut.result1;
    assign result_pe[2] = uut.result2;
    assign result_pe[3] = uut.result3;
    assign result_pe[4] = uut.result4;
    assign result_pe[5] = uut.result5;
    assign result_pe[6] = uut.result6;
    assign result_pe[7] = uut.result7;
    assign result_pe[8] = uut.result8;
    assign result_pe[9] = uut.result9;
    assign result_pe[10] = uut.result10;
    assign result_pe[11] = uut.result11;
    assign result_pe[12] = uut.result12;
    assign result_pe[13] = uut.result13;
    assign result_pe[14] = uut.result14;
    assign result_pe[15] = uut.result15;

    // Clock Generation
    initial begin
        clk = 0;
        forever # (CLK_PERIOD / 2) clk = ~clk;
    end

    // Test sequence
    initial begin
        $display("------------------------------------------------------------------");
        $display("Starting Systolic Array Testbench with Arrays");
        $display("------------------------------------------------------------------");
        
        // Initialize
        rst = 1;
        for (integer i = 0; i < 4; i = i + 1) begin
            matrix_a[i] = 0;
            matrix_b[i] = 0;
        end
        
        # (CLK_PERIOD) rst = 0;

        // Skewed input data
        # (CLK_PERIOD) begin
            matrix_a[0] = 1;
            matrix_b[0] = 1;
        end
        # (CLK_PERIOD) begin
            matrix_a[1] = 2;
            matrix_b[1] = 0;
        end
        # (CLK_PERIOD) begin
            matrix_a[2] = 3;
            matrix_b[2] = 0;
        end
        # (CLK_PERIOD) begin
            matrix_a[3] = 4;
            matrix_b[3] = 0;
        end
        # (CLK_PERIOD) begin
            matrix_a[0] = 5; matrix_a[1] = 6; matrix_a[2] = 7; matrix_a[3] = 8;
            matrix_b[0] = 0; matrix_b[1] = 1; matrix_b[2] = 0; matrix_b[3] = 0;
        end
        # (CLK_PERIOD) begin
            matrix_a[0] = 9; matrix_a[1] = 10; matrix_a[2] = 11; matrix_a[3] = 12;
            matrix_b[0] = 0; matrix_b[1] = 0; matrix_b[2] = 1; matrix_b[3] = 0;
        end
        # (CLK_PERIOD) begin
            matrix_a[0] = 13; matrix_a[1] = 14; matrix_a[2] = 15; matrix_a[3] = 16;
            matrix_b[0] = 0; matrix_b[1] = 0; matrix_b[2] = 0; matrix_b[3] = 1;
        end
        
        # (CLK_PERIOD * (DONE_CYCLES - 4));

        $display("------------------------------------------------------------------");
        $display("Final results after DONE signal is asserted:");
        $display("------------------------------------------------------------------");
        $display("Result Matrix C (C = A * B):");
        $display("C[0][0]=%0d, C[0][1]=%0d, C[0][2]=%0d, C[0][3]=%0d", result_pe[0], result_pe[1], result_pe[2], result_pe[3]);
        $display("C[1][0]=%0d, C[1][1]=%0d, C[1][2]=%0d, C[1][3]=%0d", result_pe[4], result_pe[5], result_pe[6], result_pe[7]);
        $display("C[2][0]=%0d, C[2][1]=%0d, C[2][2]=%0d, C[2][3]=%0d", result_pe[8], result_pe[9], result_pe[10], result_pe[11]);
        $display("C[3][0]=%0d, C[3][1]=%0d, C[3][2]=%0d, C[3][3]=%0d", result_pe[12], result_pe[13], result_pe[14], result_pe[15]);
        
        # (CLK_PERIOD * 3);
        $finish;
    end

    always @(posedge clk) begin
        $display("Time %0t: done=%0d, count=%0d", $time, done, uut.count);
    end

endmodule
